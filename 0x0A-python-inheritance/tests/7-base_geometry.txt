The ``7-base_geometry`` module
======================

Using ``BaseGeometry``
-------------------

This is an example text file in reStructuredText format.  First import
``BaseGeometry`` from the ``7-base_geometry`` module:

    >>> BG = __import__('7-base_geometry').BaseGeometry


    >>> bg = BG()
    >>> bg.integer_validator("num", 50)
    True


    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'


    >>> bg.integer_validator("nmbr")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'


    >>> bg.integer_validator("nmbr","a")
    Traceback (most recent call last):
    ...
    TypeError: nmbr must be an integer


    >>> bg.integer_validator("n", -5)
    Traceback (most recent call last):
    ...
    ValueError: n must be greater than 0


    >>> bg.integer.validator(5, 5)
    Traceback (most recent call last):
    ...
    AttributeError: 'BaseGeometry' object has no attribute 'integer'


    >>> type(bg) is BG
    True


    >>> isinstance(bg, BG)
    True


    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

    >>> print(bg) # doctest: +ELLIPSIS
    <7-base_geometry.BaseGeometry object at ...>

    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>


    >>> bg = BG()
    >>> bg.area("a")
    Traceback (most recent call last):
    ...
    TypeError: area() takes 1 positional argument but 2 were given


    >>> bg.integer_validator((45, 4), "a")
    Traceback (most recent call last):
    ...
    TypeError: (45, 4) must be an integer


    >>> bg.integer_validator((45, 4), -5)
    Traceback (most recent call last):
    ...
    ValueError: (45, 4) must be greater than 0


    >>> bg.integer_validator("name", 0)
    Traceback (most recent call last):
    ...
    ValueError: name must be greater than 0
